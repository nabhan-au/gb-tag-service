// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/tag.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	model "github.com/GarnBarn/common-go/model"
	model0 "github.com/GarnBarn/gb-tag-service/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTag is a mock of Tag interface.
type MockTag struct {
	ctrl     *gomock.Controller
	recorder *MockTagMockRecorder
}

// MockTagMockRecorder is the mock recorder for MockTag.
type MockTagMockRecorder struct {
	mock *MockTag
}

// NewMockTag creates a new mock instance.
func NewMockTag(ctrl *gomock.Controller) *MockTag {
	mock := &MockTag{ctrl: ctrl}
	mock.recorder = &MockTagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTag) EXPECT() *MockTagMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockTag) CreateTag(tag *model.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagMockRecorder) CreateTag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTag)(nil).CreateTag), tag)
}

// DeleteTag mocks base method.
func (m *MockTag) DeleteTag(tagId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagMockRecorder) DeleteTag(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTag)(nil).DeleteTag), tagId)
}

// GetAllTag mocks base method.
func (m *MockTag) GetAllTag(author string) ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTag", author)
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTag indicates an expected call of GetAllTag.
func (mr *MockTagMockRecorder) GetAllTag(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTag", reflect.TypeOf((*MockTag)(nil).GetAllTag), author)
}

// GetTagById mocks base method.
func (m *MockTag) GetTagById(tagId int, maskSecretKey bool) (model0.TagPublic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", tagId, maskSecretKey)
	ret0, _ := ret[0].(model0.TagPublic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagMockRecorder) GetTagById(tagId, maskSecretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTag)(nil).GetTagById), tagId, maskSecretKey)
}

// IsTagExist mocks base method.
func (m *MockTag) IsTagExist(tagId int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTagExist", tagId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTagExist indicates an expected call of IsTagExist.
func (mr *MockTagMockRecorder) IsTagExist(tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTagExist", reflect.TypeOf((*MockTag)(nil).IsTagExist), tagId)
}

// UpdateTag mocks base method.
func (m *MockTag) UpdateTag(tagId int, tagUpdateRequest *model0.UpdateTagRequest) (*model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", tagId, tagUpdateRequest)
	ret0, _ := ret[0].(*model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagMockRecorder) UpdateTag(tagId, tagUpdateRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTag)(nil).UpdateTag), tagId, tagUpdateRequest)
}
